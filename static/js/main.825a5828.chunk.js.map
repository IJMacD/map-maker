{"version":3,"sources":["const.js","useSavedState.js","database.hashmap.js","Style.js","render.js","Overpass.js","App.js","useDebounce.js","serviceWorker.js","index.js"],"names":["API_ROOT","useSavedState","key","initalState","saved","localStorage","getItem","JSON","parse","e","React","useState","state","setState","newState","setItem","stringify","HashMapDatabase","this","store","Map","nodes","n","set","id","get","ids","Promise","resolve","map","getNode","StyleSelector","type","tags","Object","entries","k","v","join","expandRules","rules","out","rule","declarations","selectors","selector","push","text","m","exec","substring","length","m2","re2","parseMultiple","split","filter","x","clearMap","canvasRef","current","clientWidth","clientHeight","width","devicePixelRatio","height","renderMap","bbox","elements","parseFloat","minLon","minLat","maxLon","maxLat","isNaN","nodeMap","forEach","ctx","getContext","projection","size","Math","max","QUARTER_PI","PI","worldWidth","minX","maxX","NMin","log","tan","minY","NMax","maxY","xScale","yScale","scale","min","lon","lat","N","y","mercatorProjection","el","save","fillStyle","strokeStyle","lineWidth","globalAlpha","beginPath","r","ellipse","moveTo","i","lineTo","closePath","fill","stroke","content","match","replace","fontSize","fontWeight","fontFamily","font","strokeText","fillText","restore","require","Overpass","query","url","fetch","toString","then","ok","json","reject","status","d","setTimeout","s","has","p","tryElements","catch","delete","App","style","setStyle","setBbox","useRef","databaseRef","overpassRef","fetching","setFetching","error","setError","debouncedStyle","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","clearTimeout","useDebounce","parsedStyle","useMemo","styleText","re","trim","indexOf","property","parseStyle","setBBox","a","promise","getElements","item","run","className","onChange","target","color","ref","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.825a5828.chunk.js","sourcesContent":["\r\nexport const API_ROOT = \"https://lz4.overpass-api.de/api/interpreter\";","import React from 'react';\r\n\r\nexport default function useSavedState (key, initalState) {\r\n    const saved = localStorage.getItem(key);\r\n\r\n    if (saved) {\r\n        try {\r\n            initalState = JSON.parse(saved);\r\n        } catch (e) {}\r\n    }\r\n\r\n    const [ state, setState ] = React.useState(initalState);\r\n\r\n    return [\r\n        state,\r\n        newState => {\r\n            localStorage.setItem(key, JSON.stringify(newState));\r\n            setState(newState);\r\n        }\r\n    ]\r\n}","export default class HashMapDatabase {\r\n    constructor () {\r\n        this.store = new Map();\r\n    }\r\n\r\n    saveNodes (nodes) {\r\n        for (const n of nodes) {\r\n            this.store.set(n.id, n);\r\n        }\r\n    }\r\n\r\n    getNode (id) {\r\n        return this.store.get(id);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number[]} ids \r\n     */\r\n    getNodes (ids) {\r\n        return Promise.resolve(ids.map(id => this.getNode(id)));\r\n    }\r\n}","\r\n/** \r\n * @typedef StyleRule\r\n * @property {StyleSelector} [selector]\r\n * @property {StyleSelector[]} [selectors]\r\n * @property {{ [key: string]: string }} declarations\r\n */\r\n\r\nexport class StyleSelector {\r\n    /**\r\n     * @param {string} type\r\n     * @param {{ [key: string]: string }} tags\r\n     */\r\n    constructor (type, tags) {\r\n      this.type = type;\r\n      this.tags = tags;\r\n    }\r\n  \r\n    toString () {\r\n      return `${this.type}${Object.entries(this.tags).map(([k,v]) => `[${k}=${v}]`).join(\"\")}`;\r\n    }\r\n}\r\n  \r\nStyleSelector.parse = function (text) {\r\n    const re = /(node|way|relation|area)/;\r\n    const m = re.exec(text);\r\n  \r\n    if (!m) return null;\r\n  \r\n    const type = m[1];\r\n    /** @type {{ [key: string]: string }} */\r\n    const tags = {};\r\n  \r\n    text = text.substring(type.length);\r\n  \r\n    const re2 = /\\[([^[\\]=]+)=([^[\\]=]+)\\]/g;\r\n  \r\n    let m2;\r\n  \r\n    while (m2 = re2.exec(text)) {\r\n      tags[m2[1]] = m2[2];\r\n    }\r\n  \r\n    return new StyleSelector(type, tags);\r\n}\r\n  \r\n/**\r\n * \r\n * @param {string} text \r\n */\r\nStyleSelector.parseMultiple = function (text) {\r\n    return text.split(\",\").map(StyleSelector.parse).filter(x => x);\r\n}\r\n\r\n/**\r\n * \r\n * @param {{ rules: StyleRule[] }} style \r\n * @param {import(\"./Overpass\").OverpassElement} element \r\n * @returns {StyleRule}\r\n */\r\nexport function matchRule (style, element) {\r\n    for (const rule of style.rules) {\r\n      for (const selector of rule.selectors) {\r\n        if (element.type !== selector.type) continue;\r\n  \r\n        let match = true;\r\n  \r\n        for (const [key, value] of Object.entries(selector.tags)) {\r\n          if (!element.tags || element.tags[key] !== value) {\r\n            match = false;\r\n            break;\r\n          }\r\n        }\r\n  \r\n        if (match)  return rule;\r\n      }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string} styleText\r\n * @returns {{ rules: StyleRule[] }}\r\n */\r\nexport function parseStyle (styleText) {\r\n  const re = /([^{}]+)\\s*{([^{}]*)}/g;\r\n  let match;\r\n  const out = { rules: [] };\r\n\r\n  while(match = re.exec(styleText)) {\r\n    const declarations = {};\r\n    \r\n    match[2].split(\";\").map(s => s.trim()).filter(s => s).forEach(s => {\r\n      // s.split(\":\", 2) is not the same as PHP\r\n      const i = s.indexOf(\":\");\r\n      const property = s.substring(0,i).trim();\r\n      const value = s.substring(i+1).trim();\r\n      declarations[property] = value;\r\n    });\r\n\r\n    const selectors = StyleSelector.parseMultiple(match[1]);\r\n\r\n    if (selectors.length) {\r\n      out.rules.push({\r\n        selectors,\r\n        declarations,\r\n      });\r\n    }\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * \r\n * @param {StyleRule[]} rules \r\n */\r\nexport function expandRules (rules) {\r\n  const out = [];\r\n  for (const rule of rules) {\r\n    const { declarations } = rule;\r\n    for (const selector of rule.selectors) {\r\n      out.push({ selector, declarations });\r\n    }\r\n  }\r\n  return out;\r\n}","\r\nexport function clearMap (canvasRef) {\r\n    const { clientWidth, clientHeight } = canvasRef.current;\r\n\r\n    const width = clientWidth * devicePixelRatio;\r\n    const height = clientHeight * devicePixelRatio;\r\n\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n}\r\n\r\n/**\r\n * @param {string} bbox\r\n * @param {import(\"./Overpass\").OverpassElement[]} elements\r\n * @param {React.MutableRefObject<HTMLCanvasElement>} canvasRef\r\n * @param {import(\"./Style\").StyleRule} rule\r\n */\r\nexport function renderMap (bbox, elements, canvasRef, rule) {\r\n    const [minLon, minLat, maxLon, maxLat] = bbox.split(\",\").map(parseFloat);\r\n\r\n    if (canvasRef.current && !isNaN(minLon) && !isNaN(minLat) && !isNaN(maxLon) && !isNaN(maxLat)) {\r\n\r\n        // Prepare node map\r\n        const nodeMap = {};\r\n        elements.filter(n => n.type === \"node\").forEach(n => nodeMap[n.id] = n);\r\n        \r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        const { clientWidth, clientHeight } = canvasRef.current;\r\n\r\n        const width = clientWidth * devicePixelRatio;\r\n        const height = clientHeight * devicePixelRatio;\r\n\r\n        /** @type {(lon: number, lat: number) => [number, number]} */\r\n        const projection = mercatorProjection(minLon, minLat, maxLon, maxLat, width, height);\r\n\r\n        for (const el of elements) {\r\n            if (el.type !== rule.selector.type) continue;\r\n\r\n            ctx.save();\r\n\r\n            ctx.fillStyle = rule.declarations[\"fill\"];\r\n            ctx.strokeStyle = rule.declarations[\"stroke\"];\r\n            ctx.lineWidth = +rule.declarations[\"stroke-width\"] * devicePixelRatio;\r\n            \r\n            if (rule.declarations[\"opacity\"]) \r\n                ctx.globalAlpha = +rule.declarations[\"opacity\"];\r\n\r\n            // Paths\r\n            ctx.beginPath();\r\n\r\n            if (el.type === \"node\") {\r\n\r\n                const r = +rule.declarations[\"size\"] * devicePixelRatio;\r\n                const [x, y] = projection(el.lon, el.lat);\r\n\r\n                ctx.ellipse(x, y, r, r, 0, 0, Math.PI * 2);\r\n\r\n            }\r\n            else if (el.type === \"way\") {\r\n                if (!el.nodes) continue;\r\n\r\n                const nodes = el.nodes.map(id => nodeMap[id]);\r\n\r\n                ctx.moveTo(...projection(nodes[0].lon, nodes[0].lat));\r\n                for (let i = 1; i < nodes.length; i++) {\r\n                    ctx.lineTo(...projection(nodes[i].lon, nodes[i].lat));\r\n                }\r\n            }\r\n            else if (el.type === \"area\") {\r\n                if (!el.nodes) continue;\r\n\r\n                const nodes = el.nodes.map(id => nodeMap[id]);\r\n\r\n                ctx.moveTo(...projection(nodes[0].lon, nodes[0].lat));\r\n                for (let i = 1; i < nodes.length; i++) {\r\n                    ctx.lineTo(...projection(nodes[i].lon, nodes[i].lat));\r\n                }\r\n                ctx.closePath();\r\n            }\r\n\r\n            rule.declarations[\"fill\"] && ctx.fill();\r\n            rule.declarations[\"stroke\"] && ctx.stroke();\r\n\r\n            // Text Handling \r\n            \r\n            if (rule.declarations[\"content\"] && el.type === \"node\") {\r\n                const [x, y] = projection(el.lon, el.lat);\r\n\r\n                let content = rule.declarations[\"content\"];\r\n                \r\n                if (content.match(/^\".*\"$/g)) {\r\n                    content = content.replace(/^\"|\"$/g, \"\");\r\n                } else if (content.match(/tag\\(([^)]+)\\)/)) {\r\n                    const m = content.match(/tag\\(([^)]+)\\)/);\r\n                    content = el.tags[m[1]] || \"\";\r\n                } else {\r\n                    content = \"?\";\r\n                }\r\n\r\n                let fontSize = `${10 * devicePixelRatio}px`;\r\n                let fontWeight = \"normal\";\r\n                let fontFamily = \"sans-serif\";\r\n\r\n                if (rule.declarations[\"font-size\"]) {\r\n                    fontSize = rule.declarations[\"font-size\"].replace(/^\\d[\\d.]*/, m => `${+m * devicePixelRatio}`);\r\n                }\r\n\r\n                if (rule.declarations[\"font-weight\"]) {\r\n                    fontWeight = rule.declarations[\"font-weight\"];\r\n                }\r\n\r\n                if (rule.declarations[\"font-family\"]) {\r\n                    fontFamily = rule.declarations[\"font-family\"];\r\n                }\r\n\r\n                ctx.font = rule.declarations[\"font\"] || `${fontWeight} ${fontSize} ${fontFamily}`;\r\n\r\n                if (rule.declarations[\"stroke\"]) \r\n                    ctx.strokeText(content, x, y);\r\n                if (rule.declarations[\"fill\"] || !rule.declarations[\"stroke\"]) \r\n                    ctx.fillText(content, x, y);\r\n            }\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @returns {(lon: number, lat: number) => [number, number]} \r\n */\r\nfunction flatProjection (minLon, minLat, maxLon, maxLat, width, height) {\r\n    const xScale = width / (maxLon - minLon);\r\n    const yScale = height / (maxLat - minLat);\r\n    const scale = Math.max(xScale, yScale);\r\n    return ((lon, lat) => [(lon - minLon) * scale, height - (lat - minLat) * scale]);\r\n}\r\n\r\n/**\r\n * @returns {(lon: number, lat: number) => [number, number]} \r\n */\r\nfunction mercatorProjection (minLon, minLat, maxLon, maxLat, width, height) {\r\n    const size = Math.max(width,height);    \r\n\r\n    const QUARTER_PI = Math.PI / 4;\r\n    const worldWidth = (size / 360);\r\n    const minX = (minLon + 180) * worldWidth;\r\n    const maxX = (maxLon + 180) * worldWidth;\r\n    const NMin = Math.log(Math.tan(QUARTER_PI + (minLat / 180 * Math.PI) / 2));\r\n    const minY = (size / 2) - (size * NMin / (2 * Math.PI));\r\n    const NMax = Math.log(Math.tan(QUARTER_PI + (maxLat / 180 * Math.PI) / 2));\r\n    const maxY = (size / 2) - (size * NMax / (2 * Math.PI));\r\n\r\n    const xScale = size / (maxX - minX);\r\n    const yScale = size / (minY - maxY);\r\n    const scale = Math.min(xScale, yScale);\r\n\r\n    return (lon, lat) => {\r\n        const E = (lon + 180)\r\n        const x = E * worldWidth;\r\n        const N = Math.log(Math.tan(QUARTER_PI + (lat / 180 * Math.PI) / 2));\r\n        const y = (size / 2) - (size * N / (2 * Math.PI));\r\n\r\n        return [(x - minX)*scale, height+(y-minY)*scale];\r\n    }\r\n}","const API_ROOT = require(\"./const\").API_ROOT;\r\n\r\nexport class Overpass {\r\n    constructor (bbox) {\r\n        /** @type {Map<string, Promise<OverpassElement[]>>} */\r\n        this.elements = new Map();\r\n        this.bbox = bbox;\r\n    }\r\n\r\n    setBBox (bbox) {\r\n        this.bbox = bbox;\r\n    }\r\n\r\n    query (selector) {\r\n        let query;\r\n        if (selector.type===\"way\"||selector.type===\"area\") {\r\n            query = `[out:json][bbox];\\n(\\n\\t${selector};\\n\\t>;\\n);\\nout;`;\r\n        } else {\r\n            query = `[out:json][bbox];\\n${selector};\\nout;`;\r\n        }\r\n        const url = `${API_ROOT}?data=${query.replace(/\\s/,\"\")}&bbox=${this.bbox}`;\r\n        return fetch(url.toString()).then(r => r.ok ? r.json() : Promise.reject(r.status));\r\n    }\r\n\r\n    tryElements (selector) {\r\n        return new Promise ((resolve, reject) => {\r\n            this.query(selector).then(d => {\r\n                resolve(d.elements);\r\n            }, e => {\r\n                if (e !== 429) reject(\"Bad Response\");\r\n                // Retry 1\r\n                else setTimeout(() => {\r\n                    this.query(selector).then(d => {\r\n                        resolve(d.elements);\r\n                    }, e => {\r\n                        if (e !== 429) reject(\"Bad Response\");\r\n                        // Retry 2\r\n                        else setTimeout(() => {\r\n                            this.query(selector).then(d => {\r\n                                resolve(d.elements);\r\n                            }, reject);\r\n                        }, 5000);\r\n                    });\r\n                }, 5000);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {import(\"./Style\").StyleSelector} selector\r\n     * @returns {Promise<OverpassElement[]>}\r\n     */\r\n    getElements (selector) {\r\n        const s = selector.toString();\r\n        if (this.elements.has(s)) return this.elements.get(s);\r\n\r\n        const p = this.tryElements(selector);\r\n        \r\n        this.elements.set(s, p);\r\n        \r\n        p.catch(() => this.elements.delete(s));\r\n\r\n        return p;\r\n    }\r\n}\r\n\r\n/** @typedef {import('./Style.js').StyleRule} StyleRule */\r\n\r\n/**\r\n * @typedef {OverpassNodeElement|OverpassWayElement|OverpassAreaElement} OverpassElement\r\n */\r\n\r\n/**\r\n * @typedef OverpassNodeElement\r\n * @property {number} id\r\n * @property {\"node\"} type\r\n * @property {number} lon\r\n * @property {number} lat\r\n * @property {{ [key: string]: string }} [tags]\r\n */\r\n\r\n/**\r\n * @typedef OverpassWayElement\r\n * @property {number} id\r\n * @property {\"way\"} type\r\n * @property {number[]} nodes\r\n * @property {{ [key: string]: string }} [tags]\r\n */\r\n\r\n/**\r\n * @typedef OverpassAreaElement\r\n * @property {number} id\r\n * @property {\"area\"} type\r\n * @property {number[]} nodes\r\n * @property {{ [key: string]: string }} [tags]\r\n */\r\n\r\n/**\r\n * @typedef NodeDatabase\r\n * @property {(nodes: object[]) => void} saveNodes\r\n * @property {(id: number) => object} getNode\r\n * @property {(ids: number[]) => Promise<object[]>} getNodes\r\n */\r\n","import React from 'react';\nimport './App.css';\nimport useSavedState from './useSavedState';\nimport HashMapDatabase from './database.hashmap.js';\nimport { parseStyle, expandRules } from './Style';\nimport { renderMap, clearMap } from './render';\nimport { Overpass } from './Overpass';\nimport { useDebounce } from './useDebounce';\n\n/** @typedef {import(\"./Overpass\").NodeDatabase} NodeDatabase */\n\nfunction App() {\n  const [ style, setStyle ] = useSavedState(\"USER_STYLE\", \"node[amenity=post_box] {\\n\\tfill: black;\\n\\tsize: 2;\\n}\");\n  const [ bbox, setBbox ] = useSavedState(\"USER_BBOX\", \"7.0,50.6,7.3,50.8\");\n  /** @type {React.MutableRefObject<HTMLCanvasElement>} */\n  const canvasRef = React.useRef();\n  /** @type {React.MutableRefObject<NodeDatabase>} */\n  const databaseRef = React.useRef();\n  /** @type {React.MutableRefObject<Overpass>} */\n  const overpassRef = React.useRef();\n  const [ fetching, setFetching ] = React.useState(false);\n  const [ error, setError ] = React.useState(\"\");\n  \n  if (!databaseRef.current) {\n    databaseRef.current = new HashMapDatabase();\n  }\n  \n  if (!overpassRef.current) {\n    overpassRef.current = new Overpass(bbox);\n  }\n\n  const debouncedStyle = useDebounce(style, 500);\n  \n  const parsedStyle = React.useMemo(() => parseStyle(debouncedStyle), [debouncedStyle]);\n\n  React.useEffect(() => overpassRef.current.setBBox(bbox), [bbox]);\n  \n  // Refetch/Render map when bbox, or style change\n  React.useEffect(() => {\n    async function run () {\n      setFetching(true);\n      setError(\"\");\n      try {\n        const rules = expandRules(parsedStyle.rules);\n        const map = rules.map(rule => {\n          return {\n            rule,\n            promise: overpassRef.current.getElements(rule.selector),\n          }\n        });\n        clearMap(canvasRef);\n        for (const item of map) {\n          const elements = await item.promise;\n          renderMap(bbox, elements, canvasRef, item.rule);\n        }\n      } catch (e) {\n        setError(\"Error Fetching\");\n      } finally {\n        setFetching(false);\n      }\n    }\n\n    run();\n  }, [bbox, parsedStyle]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <label>Bounding Box <input value={bbox} onChange={e => setBbox(e.target.value)} /></label>\n        <label>Style <textarea value={style} onChange={e => setStyle(e.target.value)} /></label>\n        { fetching && <p>Fetching...</p> }\n        { error && <p style={{color:\"red\"}}>{error}</p> }\n      </div>\n      <canvas ref={canvasRef} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * @link https://usehooks.com/useDebounce/\r\n * @param {any} value \r\n * @param {number} delay \r\n */\r\nexport function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n  \r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n  \r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n  \r\n    return debouncedValue;\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}